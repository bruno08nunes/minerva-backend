// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  totalXP       Int       @default(0)
  streak        Int       @default(0)
  lastActiveDay DateTime?
  semanalXP     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)

  username String @unique

  profilePictureId String?
  profilePicture   ProfilePicture? @relation(fields: [profilePictureId], references: [id], onDelete: SetNull)

  achievements UserAchievement[]

  followings Follow[] @relation("Following")
  followers  Follow[] @relation("Follower")

  Progress Progress[]
}

model Icon {
  id  String @id @default(uuid())
  url String

  topics       Topic[]
  themes       Theme[]
  lessons      Lesson[]
  achievements Achievement[]
}

model Topic {
  id          String @id @default(uuid())
  name        String
  description String
  iconId      String
  icon        Icon   @relation(fields: [iconId], references: [id])

  lessons Lesson[]

  Explanation Explanation[]
}

model Theme {
  id          String @id @default(uuid())
  name        String
  description String
  iconId      String
  icon        Icon   @relation(fields: [iconId], references: [id])

  lessons Lesson[]
}

model Lesson {
  id          String @id @default(uuid())
  name        String
  description String
  rewardXP    Int
  order       Int

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  themeId String
  theme   Theme  @relation(fields: [themeId], references: [id])

  iconId String
  icon   Icon   @relation(fields: [iconId], references: [id])

  exercises Exercise[]

  Progress Progress[]
}

model Exercise {
  id        String       @id @default(uuid())
  statement String
  order     Int
  type      ExerciseType
  hint      String
  lessonId  String
  lesson    Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  choices Choice[]
}

model Choice {
  id         String   @id @default(uuid())
  text       String
  order      Int
  isCorrect  Boolean
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Progress {
  userId      String
  lessonId    String
  isCompleted Boolean
  lastTry     DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([userId, lessonId])
}

model ProfilePicture {
  id  String @id @default(uuid())
  url String

  users User[]
}

model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  iconId      String
  icon        Icon   @relation(fields: [iconId], references: [id])

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  achievedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Explanation {
  id        String   @id @default(uuid())
  title     String
  content   Json
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([topicId])
}

enum ExerciseType {
  MULTIPLE_CHOICE
  WRITE_CODE
  COMPLETE_CODE
}

enum Role {
  USER
  ADMIN
}
